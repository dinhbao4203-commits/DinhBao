const db = require("../models");
const Promotion = db.promotion;

// ‚ûï T·∫°o khuy·∫øn m√£i (admin)
exports.createPromotion = async (req, res) => {
  try {
    const { title, description, discount, startDate, endDate } = req.body;

    if (!title || !discount || !startDate || !endDate) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin khuy·∫øn m√£i!" });
    }

    const newPromotion = await Promotion.create({
      title,
      description,
      discount,
      startDate,
      endDate
    });

    res.status(201).json({ message: "T·∫°o khuy·∫øn m√£i th√†nh c√¥ng!", promotion: newPromotion });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server khi t·∫°o khuy·∫øn m√£i!", error: err.message });
  }
};

// üìã L·∫•y t·∫•t c·∫£ khuy·∫øn m√£i
exports.getAllPromotions = async (req, res) => {
  try {
    const promotions = await Promotion.findAll({
      order: [["createdAt", "DESC"]]
    });
    res.status(200).json(promotions);
  } catch (err) {
    res.status(500).json({ message: "L·ªói server khi l·∫•y danh s√°ch khuy·∫øn m√£i!", error: err.message });
  }
};

// üîç L·∫•y chi ti·∫øt m·ªôt khuy·∫øn m√£i theo ID
exports.getPromotionById = async (req, res) => {
  try {
    const id = req.params.id;
    const promotion = await Promotion.findByPk(id);

    if (!promotion) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y khuy·∫øn m√£i!" });
    }

    res.status(200).json(promotion);
  } catch (err) {
    res.status(500).json({ message: "L·ªói server khi l·∫•y khuy·∫øn m√£i!", error: err.message });
  }
};

// üñäÔ∏è C·∫≠p nh·∫≠t khuy·∫øn m√£i
exports.updatePromotion = async (req, res) => {
  try {
    const id = req.params.id;
    const [updated] = await Promotion.update(req.body, { where: { id } });

    if (updated === 0) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y khuy·∫øn m√£i!" });
    }

    const updatedPromotion = await Promotion.findByPk(id);
    res.status(200).json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!", promotion: updatedPromotion });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server khi c·∫≠p nh·∫≠t!", error: err.message });
  }
};

// ‚ùå Xo√° khuy·∫øn m√£i
exports.deletePromotion = async (req, res) => {
  try {
    const id = req.params.id;
    const deleted = await Promotion.destroy({ where: { id } });

    if (deleted === 0) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y khuy·∫øn m√£i ƒë·ªÉ xo√°!" });
    }

    res.status(200).json({ message: "Xo√° khuy·∫øn m√£i th√†nh c√¥ng!" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server khi xo√° khuy·∫øn m√£i!", error: err.message });
  }
};
