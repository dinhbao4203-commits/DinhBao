const db = require("../models");
const user = db.user;
const bcrypt = require("bcryptjs");

// üìå L·∫•y th√¥ng tin user ƒëang ƒëƒÉng nh·∫≠p
exports.getMe = async (req, res) => {
  try {
    const foundUser = await user.findByPk(req.user.id, {
      attributes: { exclude: ["password"] },
    });

    if (!foundUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng" });
    }

    res.json(foundUser);
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y th√¥ng tin c√° nh√¢n", error: error.message });
  }
};

// üìå C·∫≠p nh·∫≠t th√¥ng tin user ƒëang ƒëƒÉng nh·∫≠p
exports.updateMe = async (req, res) => {
  try {
    const { name, email, password } = req.body;

    const foundUser = await user
    .findByPk(req.user.id);
    if (!foundUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    let updatedData = { name, email };

    if (password) {
      const salt = await bcrypt.genSalt(10);
      updatedData.password = await bcrypt.hash(password, salt);
    }

    await foundUser.update(updatedData);
    res.json({ message: "C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n th√†nh c√¥ng" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n", error: error.message });
  }
};

// üìå L·∫•y danh s√°ch user (Admin)
exports.getAllUsers = async (req, res) => {
  try {
    const users = await user.findAll({
      attributes: { exclude: ["password"] },
    });
    res.json(users);
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch user", error: error.message });
  }
};

// üìå L·∫•y 1 user theo id (Admin)
exports.getUserById = async (req, res) => {
  try {
    const foundUser = await User.findByPk(req.params.id, {
      attributes: { exclude: ["password"] },
    });

    if (!foundUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });
    }

    res.json(foundUser);
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y user", error: error.message });
  }
};

// üìå T·∫°o user m·ªõi (Admin)
exports.createUser = async (req, res) => {
  try {
    const { name, email, password, role } = req.body;

    if (!name || !email || !password) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß name, email, password" });
    }

    const existingUser = await User.findOne({ where: { email } });
    if (existingUser) {
      return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });
    }

    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    const newUser = await user.create({
      name,
      email,
      password: hashedPassword,
      role,
    });

    res.status(201).json({
      message: "T·∫°o user th√†nh c√¥ng",
      user: {
        id: newUser.id,
        name: newUser.name,
        email: newUser.email,
        role: newUser.role,
      },
    });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi t·∫°o user", error: error.message });
  }
};

// üìå C·∫≠p nh·∫≠t user (Admin)
exports.updateUser = async (req, res) => {
  try {
    const { name, email, password, role } = req.body;

    const foundUser = await user.findByPk(req.params.id);
    if (!foundUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });
    }

    let updatedData = { name, email, role };

    if (password) {
      const salt = await bcrypt.genSalt(10);
      updatedData.password = await bcrypt.hash(password, salt);
    }

    await foundUser.update(updatedData);
    res.json({ message: "C·∫≠p nh·∫≠t user th√†nh c√¥ng" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t user", error: error.message });
  }
};

// üìå X√≥a user (Admin)
exports.deleteUser = async (req, res) => {
  try {
    const foundUser = await user.findByPk(req.params.id);
    if (!foundUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });
    }

    await foundUser.destroy();
    res.json({ message: "X√≥a user th√†nh c√¥ng" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi x√≥a user", error: error.message });
  }
};
